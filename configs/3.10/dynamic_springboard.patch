// Copyright 2019-2022 Alibaba Group Holding Limited.
// SPDX-License-Identifier: GPL-2.0 OR BSD-3-Clause

From d627ff8250fdb7a092a75729b02c90cc75191640 Mon Sep 17 00:00:00 2001
From: Yihao Wu <wuyihao@linux.alibaba.com>
Date: Sun, 28 Mar 2021 01:59:28 +0800
Subject: [PATCH] Dynamic __schedule springboard

With this springboard, we don't have to customize the kernel's __schedule

Signed-off-by: Yihao Wu <wuyihao@linux.alibaba.com>
---
 kernel/sched/mod/core.c | 12 +++++++++++-
 1 file changed, 10 insertions(+), 1 deletion(-)

diff --git a/kernel/sched/mod/core.c b/kernel/sched/mod/core.c
index 5ec2ca5..3b8925a 100644
--- a/kernel/sched/mod/core.c
+++ b/kernel/sched/mod/core.c
@@ -2590,6 +2590,8 @@ context_switch(struct rq *rq, struct task_struct *prev,
  * context_switch - switch to the new MM and the new
  * thread's register state.
  */
+extern unsigned long sched_springboard;
+
 static inline void
 context_switch(struct rq *rq, struct task_struct *prev,
 	       struct task_struct *next)
@@ -2634,7 +2636,42 @@ context_switch(struct rq *rq, struct task_struct *prev,

 	context_tracking_task_switch(prev, next);
 	/* Here we just switch the register state and the stack. */
-	switch_to(prev, next, prev);
+#ifdef CONFIG_X86_64
+	__asm__("add %0,%%rsp\n\t"
+		"pushq %1\n\t"
+		"jmp __switch_to"
+		:
+		:"i"(STACKSIZE_MOD - STACKSIZE_VMLINUX), "r"(sched_springboard), "D"(prev), "S"(next)
+		:"rbx","r12","r13","r14","r15"
+	);
+#endif
+#ifdef CONFIG_ARM64
+	__asm__(
+		"ldp x29,x30,[sp,  #0]\n\t"
+		"ldp x19,x20,[sp, #16]\n\t"
+		"ldp x21,x22,[sp, #32]\n\t"
+		"ldp x23,x24,[sp, #48]\n\t"
+		"ldp x25,x26,[sp, #64]\n\t"
+		"ldp x27,x28,[sp, #80]\n\t"
+		"sub  sp,x29,%0\n\t"
+		"stp x29,x30,[sp,  #0]\n\t"
+		"stp x19,x20,[sp, #16]\n\t"
+		"stp x21,x22,[sp, #32]\n\t"
+		"stp x23,x24,[sp, #48]\n\t"
+		"stp x25,x26,[sp, #64]\n\t"
+		"stp x27,x28,[sp, #80]\n\t"
+		"mov x0,%2\n\t"
+		"mov x1,%3\n\t"
+		"ldr x30,%1\n\t"
+		"b __switch_to"
+		:
+		:"i"(STACKSIZE_VMLINUX), "m"(sched_springboard),"r"(prev),"r"(next)
+		:"x19","x20","x21","x22","x23","x24","x25",
+		 "x26","x27","x28","x30","x0","x1"
+	);
+#endif
+
+	/* Below will not be executed, we'll return to vmlinux here */

 	barrier();
 	/*
@@ -3178,6 +3190,7 @@ again:
  *          - return from syscall or exception to user-space
  *          - return from interrupt-handler to user-space
  */
+__attribute__ ((optimize("no-omit-frame-pointer")))
 static void __sched __schedule(void)
 {
 	struct task_struct *prev, *next;
2.20.1.2432.ga663e714
